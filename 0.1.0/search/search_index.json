{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pillar: Building Blocks for Python Applications","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Pillar provides resusable components for building command-line applications. No more copy-pasting boilerplate for <code>logging</code> or <code>argparse</code> just to get bare-bone features.</p> <p>In particular Pillar focusses on providing components for applications that are run as services, background tasks, or scheduled jobs (e.g. cron jobs).</p> <p>Pillar is currently Alpha software and does not have complete documentation, testing, or implementation of certain features.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Config Loading: Automatically collect, parse, and merge config files provided as arguments.</li> <li>Logging: Preconfigured console and file logging.<ul> <li>Includes bare-bones logger for when applications are initialising.</li> </ul> </li> <li>Modular: Many components are modular so you can re-use them in your applications without being forced to used all of Pillar.</li> <li>Development: fully typed for your static analysis / linting needs</li> </ul>"},{"location":"#why-use-pillar-over-click-fire-typer-or-cement","title":"Why use Pillar over Click, Fire, Typer, or Cement?","text":"<p>Tools like Click, Fire, and Typer are focussed on CLI interfaces and how to get the command-line arguments to the code that runs them. Whilst Pillar can be used for extensive CLIs, it is better suited to single purpose applications like cron jobs. That's not to say that it doesn't support command-line arguments, as it still uses and exposes <code>argparse</code> for you to add your own.</p> <p>Frameworks like Cement are powerful, but leads to a lot of boilerplate when creating lots of small applications. In contrast Pillar provides most of it's core functionality through a single class that your application subclasses from. You are able to customise and plug-and-play many components, but components are also fairly opinioated so that you don't have to remeber to customise them every time.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Follow our Quickstart Guide.</p> tldr.py<pre><code>from pillar.application import Application\n\nclass MyApplication(Application):\n    \"Hello World application that prints basic info then exits\"\n\n    def main(self):\n        self.info(f\"hello world! My name is {self.name}\")\n        self.debug(f\"My config is: {self.config}\")\n        return\n\nif __name__ == \"__main__\":\n    app = MyApplication()\n    app.run()\n</code></pre>"},{"location":"#bugs-feature-requests-etc","title":"Bugs, Feature Requests etc","text":"<p>Please submit an issue on github.</p> <p>In the case of bug reports, please help us help you by following best practices <sup>1</sup> <sup>2</sup>.</p> <p>In the case of feature requests, please provide background to the problem you are trying to solve so to help find a solution that makes the most sense for the library as well as your usecase.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>I am still working through open source licencing and contributing, so not taking PRs at this point in time. Instead raise and issue and I'll try get to it as soon a feasible.</p>"},{"location":"#licence","title":"Licence","text":"<p>This project is licenced under the MIT Licence - see <code>LICENCE</code>.</p> <p>This project includes other open source licenced software - see <code>NOTICE</code>.</p>"},{"location":"#authors","title":"Authors","text":"<p>A project by Nicholas Hairs - www.nicholashairs.com.</p>"},{"location":"applications/","title":"Writing Applications","text":"<p>The Pillar <code>Application</code> class encapsulates common boilerplate when writing applications. Although they are configured to have many \"sane\" defaults or \"automagic\" detection of settings, they are fairly configurable.</p> <p>Specifically Pillar applications handle the following tasks:</p> <ul> <li>Argument parsing and help info</li> <li>Configuration loading and parsing</li> <li>Standard logging outputs<ul> <li>Console logging</li> <li>File logging</li> </ul> </li> <li>Graceful handling of uncaught exceptions.</li> </ul> <p>This makes Pillar applications a good base when writing services, background taks, scheduled (cron) jobs, or other similar programs. That said, Pillar applications are in no way limited to these types of programs, but if you are writing a heavily CLI driven program (like <code>git</code>) there are better alternatives.</p>"},{"location":"applications/#writing-your-application","title":"Writing your application","text":"<p>You write applications by subclassing <code>Application</code> and overriding class variables and methods as needed. For an example see the quickstart sample application.</p> <p>The only method that you must override is the <code>main</code> method. This is where you should put the bulk of your program. You can set the exit/return code of your application by simply returning an <code>int</code> (note: it must be in the range of <code>0-255</code> inclusive). If your main method returns <code>None</code> this will be converted to a <code>0</code> (no error) return code.</p> <p>Sometimes you may wish to modify the <code>setup</code> method to add your own setup steps. Whilst you can completely replace it, it is recommended that you that you call <code>super().setup()</code> first so that the default behaviour can run first.</p> <p>A common reason for overriding <code>setup</code> rather than doing custom setup at the start of <code>main</code> is when you have multiple applications that should do the same basic setup. For example you might attach a custom logger that sends messages to the work chat. By using a shared based class you don't need to worry about subclasses remembering to call your custom setup in <code>main</code>.</p> <pre><code># Could be in the same package, or you might have your own\n# organisation base package you import into all projects\nclass BaseApplication(Application):\n    name = \"my-app\"\n\n    def setup(self, *args, **kwargs):\n        super().setup(*args, **kwargs)\n        # Custom setup\n        return\n\nclass ProcessStuff(BaseApplication):\n    application_name = \"my-app\"\n    # ...\n\nclass ReportStuff(BaseApplication):\n    application_name = \"my-app-report\"\n    # ...\n</code></pre>"},{"location":"applications/#argument-parsing","title":"Argument Parsing","text":"<p>Argument parsing is handled through the standard library <code>argparse</code>. Whilst there are more advanced packages available they are generally aimed at CLI heavy applications. For applications that are primarily customised through their config <code>argparse</code> should provide enough functionality.</p> <p>To add your own arguments you will need to override the <code>get_argument_parser</code> method. This should provide a ready to use <code>ArgumentParser</code>. In general you'll want to modify the default parser rather than creating one from scratch. To access it you should call the <code>super().get_argument_parser()</code> method first:</p> <pre><code>class MyApplication(Application):\n    def get_argument_parser(self):\n        parser = super().get_argument_parser()\n        # modify the parser\n        return parser\n</code></pre> <p>When running you can access the parsed arguments through <code>self.args</code>.</p>"},{"location":"applications/#the-default-parser","title":"The Default Parser","text":"<p>Generation of the default <code>ArgumentParser</code> can be customised through certain class attributes on your application.</p> <p>Program Name - This is used when generating the <code>usage: &lt;application_name&gt; &lt;args&gt;</code> displayed in the help text. By default Pillar will attempt to guess what this name is based on how the application has been called (e.g. <code>python yourscript.py</code>, <code>python -m your.package.app</code>). However this detection is pretty limited so is recommended that you set it via the <code>application_name</code> class attribute.</p> <p>Description - This is used when generating the help text. It is collected and used verbatim from the docstring of your application class.</p> <p>Epilog - This is displayed at end of the generated help text. It can be set through the <code>epilog</code> class attribute.</p> <p>Version - Version information can be provided through the <code>version</code> class attribute. If set it will register a <code>--version</code> argument that will print the version and exit.</p> <p>The default parser may also generate arguments for the following:</p> <p>Configuration Files - If enabled uses <code>-c</code>/<code>--config</code> and populates <code>self.args.config_paths</code>.</p> <p>Log directory - If file logging is enabled uses <code>--log-dir</code> and populates <code>self.args.log_dir</code>.</p> <pre><code>class MyApplication(Application):\n    \"This is my super awesome cli\"\n\n    application_name = \"some-cli\"\n    epilog = \"NO WARRANTY IS PROVIDED\"\n    version = \"0.0.0@a97ef09\"\n</code></pre>"},{"location":"applications/#configuration-files","title":"Configuration Files","text":"<p>In general Pillar applications are designed to be customised more through config files than they are commandline arguments. Configuration is loaded from two locations:</p> <p>Default Config - The default config is set via the <code>default_config</code> class attribute. It is expected to be of type <code>Dict[str, Any]</code>.</p> <p>If you are instantiating the application multiple times it is safe to use basic types including <code>dict</code> and <code>list</code> as these will be deep copied by the config loader. It is unsafe to use custom classes as by default these are not copied (and thus will be shared by all instances of your application).</p> <p>Arguments - Config files passed as arguments will automatically be loaded via the <code>ConfigLoader</code> in the order they are provided.</p> <p>This can be disabled by setting the <code>config_args_enabled</code> class attribute to <code>False</code>. Note: even if the config args are disabled the config loader will still be created (with the default config passed through).</p> <p>By default the <code>--config</code> argument is optional, however it can be made mandatory by setting the <code>config_required</code> attributes to <code>True</code>.</p> <pre><code>class MyApplication(Application):\n    config_required = True\n    default_config = {\n        \"foo\": 1,\n        \"bar\": True,\n    }\n</code></pre> <p>When running, the config is available via <code>self.config</code>.</p>"},{"location":"applications/#the-config-loader","title":"The Config Loader","text":"<p>The <code>ConfigLoader</code> class handles the loading, parsing, and merging of configuration files into a single config object.</p> <p>Merging of configuration is will merge any dictionaries with any existing values from earlier calls being overriden by values set by later calls.</p> <p>The config loader is available at <code>self.config_loader</code>. Strictly speaking <code>self.config</code> is just a reference to <code>dict</code> located at <code>self.config_loader.config</code>.</p> <p>The config loader is exposed in case you want to customise how config files are loaded. For example you may wish to disable config files from arguments and instead load the config from a predetermined location.</p> <pre><code>class MyDnsService(Application):\n    \"Custom DNS service\"\n    name = \"super-dns\"\n    application_name = \"dnsd\"\n\n    config_args_enabled = False\n    default_config = {\n        # ...\n    }\n\n    def setup(self, *args, **kwargs):\n        super().setup(*args, **kwargs)\n        self.config_loader.load_config(\"/etc/dnsd/config.yaml\")\n        return\n</code></pre> <p>The actual config loader used can be customised by setting the <code>config_loader_class</code> class attribute on your application.</p>"},{"location":"applications/#logging","title":"Logging","text":"<p>By default your application will log on it's name (<code>self.name</code>). Like <code>application_name</code> Pillar will attempt to guess this name if it is not provided. You can control this by setting the <code>name</code> class attribute.</p> <p>Pillar applications use the <code>LoggingMixin</code> which provides the following methods to log at the given level:</p> <ul> <li><code>self.vvdebug</code> (very verbose debug)</li> <li><code>self.vdebug</code> (verbose debug)</li> <li><code>self.debug</code></li> <li><code>self.info</code></li> <li><code>self.warning</code></li> <li><code>self.error</code></li> <li><code>self.critical</code></li> </ul> <p>You'll notice two extra debug levels. These are defined in <code>pillar.logging</code> to allow for finer grained control over your debug messages.</p>"},{"location":"applications/#customising-logging","title":"Customising Logging","text":"<p>Much of the default logging behaviour can be customised by setting the <code>logging_manifest</code> class attribute to your own instance of <code>LoggingManifest</code>.</p> <p>Default level - The default log level is <code>INFO</code> however this can be changed by setting the <code>default_level</code>. This default level will affect the logging level calculated from increasing the logging verbosity in the arguments. For example if the default level is <code>DEBUG</code> increasing the verbosity by one will increase it to <code>VDEBUG</code>. This is calculated using <code>get_log_level</code>.</p> <p>Logging additional names - If you wish to log additional names (for example from another library) you can provide them through <code>additional_namespaces</code> on the logging manifest. These loggers will be attached to the console and file handler.</p> <pre><code>class MyApplication(Application):\n    logging_manifest = LoggingManifest(default_level=logging.WARNING)\n</code></pre>"},{"location":"applications/#console-logging","title":"Console Logging","text":"<p>By default logs to <code>sys.stderr</code>.</p> <p>For further options see the <code>LoggingManifest</code>.</p>"},{"location":"applications/#file-logging","title":"File Logging","text":"<p>Log files will be generated at <code>/var/tmp/{name}.log</code>. This can be disabled by setting <code>file_enabled</code> to <code>False</code>.</p> <p>To prevent accidentally filling of diskspace these logs are limited in size (<code>file_max_size</code>) and only a limited number are stored (<code>file_backup_count</code>).</p> <p>For further options see the <code>LoggingManifest</code>.</p>"},{"location":"applications/#initial-logging","title":"Initial Logging","text":"<p>The initial logging is created as the first step during <code>setup</code>. This enables logging of errors encountered during argument parsing, config loading, and later logging setup.</p> <p>In addition to logging to the console it also logs to a dedicated file located at <code>/var/tmp/{name}.init.log</code>.</p> <p>For further options see the <code>LoggingManifest</code>.</p>"},{"location":"applications/#testing-and-debugging-applications","title":"Testing and Debugging Applications","text":"<p>Under Construction \ud83c\udfd7\ufe0f</p>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Initial release</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#install-via-pip","title":"Install via pip","text":"<p>Recommended</p> <p>The recommended install target will include libraries to support common usecases of Pillar. This includes a number of libraries that are not pure Python, and thus may have install requirements outside of <code>pip</code> - they are typically included as they provide more performant versions of standard libraries.</p> <p>To install Pillar with recommended packages use:</p> <pre><code>pip3 install pillar[recommended]\n</code></pre> <p>Minimal</p> <p>A minimal installation will only include libraries to perform core functionality. This can be useful if you are intending to only use parts of Pillar in another program without using the Pillar <code>Application</code>.</p> <p>To perform a minimal install use:</p> <pre><code>pip3 install pillar\n</code></pre>"},{"location":"quickstart/#sample-application","title":"Sample Application","text":""},{"location":"quickstart/#writing-our-application","title":"Writing our application","text":"pillar_sample_app.py<pre><code>import pillar.application\n\nclass MyApplication(pillar.application.Application):\n    \"\"\"This is a sample application to show off Pillar.\n\n    The class docstring will be used as the description of the program it it is set.\n    \"\"\"\n\n    # We can add an argparse epilog\n    epilog = \"Copyright (c) The Pillar Authors\"\n\n    # We can also add an argparse version\n    version = \"1.2.3\"\n\n    # Set a default config\n    default_config = {\"too_many_names\": 5}\n\n    # Customise the ArgumentParsrer\n    def get_argument_parser(self):\n        # First we generate the default one\n        parser = super().get_argument_parser()\n\n        # Now lets customise it\n        parser.add_argument(\n            \"names\",\n            metavar=\"NAME\",\n            nargs=\"*\",\n            default=[],\n            help=\"Name(s) to say hello to.\"\n        )\n        return parser\n\n    def main(self):\n        # We can access the parsed arguments with self.args\n        self.debug(f\"There are {len(self.args.names)}\")\n\n        # We can access the loaded config using self.config\n        self.vdebug(f\"Our config is {self.config}\")\n\n        # Let's write a silly little program\n\n        if len(self.args.names) &gt;= self.config[\"too_many_names\"]:\n            self.critical(\"Sorry but there are too many of you 0_0\")\n            # if main returns an integer it will be used for the\n            # exit code of the program.\n            return 1\n\n        if len(self.args.names) == 0:\n            self.error(\"Is anyone there? TT_TT\")\n            return 0\n\n        if len(self.args.names) == 1:\n            self.info(f\"Hello {self.args.names[0]}. It's quite lonely in here isn't it?\")\n        elif len(self.args.names) == 2:\n            self.info(f\"Hello {self.args.names[0]} and {self.args.names[1]}.\")\n        else:\n            self.info(f\"Hello {', '.join(self.args.names[:-1])}, and {self.args.names[-1]}\")\n\n        return 0\n\nif __name__ == \"__main__\":\n    app = MyApplication()\n    app.run()\n</code></pre>"},{"location":"quickstart/#running-our-application","title":"Running our application","text":"<pre><code>% python pillar_sample_app.py\n[23:54:32][ERROR]: Is anyone there? TT_TT\n\n% python pillar_sample_app.py Nick\n[23:56:44][INFO]: Hello Nick. It's quite lonely in here isn't it?\n\n% python pillar_sample_app.py Nick Fred\n[23:57:10][INFO]: Hello Nick and Fred.\n\n% python pillar_sample_app.py Nick Fred James\n[23:57:37][INFO]: Hello Nick, Fred, and James\n\n% python pillar_sample_app.py Nick Fred James Alice Bob Malory\n[23:58:18][CRITICAL]: Sorry but there are too many of you 0_0\n</code></pre>"},{"location":"quickstart/#viewing-help-usage-and-version-information","title":"Viewing help / usage and version information","text":"<pre><code>% python pillar_sample_app.py --help\nusage: pillar_sample_app.py [-h] [-c CONFIG_PATH] [-v] [--log-dir PATH] [--version] [NAME ...]\n\nThis is a sample application to show off Pillar.\n\nThe class docstring will be used as the description of the program it it is set.\n\npositional arguments:\n  NAME                  Name(s) to say hello to.\n\noptions:\n  -h, --help            show this help message and exit\n  -c CONFIG_PATH, --config CONFIG_PATH\n                        Add a config file to parse. Config files are parsed in the order they are\n                        added with values being merged into the previously parsed config.\n  -v, --verbose         Increase logging verbosity\n  --log-dir PATH        Set where log files should be stored. Defaults to /var/tmp\n  --version             show program's version number and exit\n\nCopyright (c) The Pillar Authors\n\n% python pillar_sample_app.py --version\n1.2.3\n</code></pre>"},{"location":"quickstart/#increasing-logging-verbosity","title":"Increasing logging verbosity","text":"<p>To view the logs we can use the <code>--verbose</code> argument multiple times, or use the shortened form <code>-v</code>.</p> <pre><code>% python pillar_sample_app.py -v Nick Fred James Alice Bob Malory\n[23:59:36][DEBUG]: There are 6\n[23:59:36][CRITICAL]: Sorry but there are too many of you 0_0\n\n% python pillar_sample_app.py -vvv Nick Fred James Alice Bob Malory\n[23:59:57][DEBUG]: There are 6\n[23:59:57][VDEBUG]: Our config is {'too_many_names': 5}\n[23:59:57][CRITICAL]: Sorry but there are too many of you 0_0\n</code></pre>"},{"location":"quickstart/#using-a-config-file","title":"Using a config file","text":"<p>We know that we have a default config with a <code>too_many_names</code> set to <code>5</code>. Let's write our own config file to increase. By default Pillar supports JSON and YAML config files.</p> pillar_sample_config.yaml<pre><code>too_many_names: 10\n</code></pre> <p>Let's call our program again with the new config file.</p> <pre><code>% python pillar_sample_app.py -c pillar_sample_config.yaml -vv Nick Fred James Alice Bob Malory\n[00:02:36][DEBUG]: There are 6\n[00:02:36][VDEBUG]: Our config is {'too_many_names': 10}\n[00:02:36][INFO]: Hello Nick, Fred, James, Alice, Bob, and Malory\n</code></pre>"},{"location":"quickstart/#viewing-the-log-files","title":"Viewing the log files","text":"<p>All our output so far has been through the console. However Pillar will also have written logs to <code>/var/tmp</code>.</p> <pre><code>% tail /var/tmp/pillar_sample_app.log\n[20240101T235737+1100][2407242][pillar_sample_app][INFO]: Hello Nick, Fred, and James\n[20240101T235818+1100][2407254][pillar_sample_app][CRITICAL]: Sorry but there are too many of you 0_0\n[20240101T235936+1100][2407292][pillar_sample_app][DEBUG]: There are 6\n[20240101T235936+1100][2407292][pillar_sample_app][CRITICAL]: Sorry but there are too many of you 0_0\n[20240101T235957+1100][2407299][pillar_sample_app][DEBUG]: There are 6\n[20240101T235957+1100][2407299][pillar_sample_app][VDEBUG]: Our config is {'too_many_names': 5}\n[20240101T235957+1100][2407299][pillar_sample_app][CRITICAL]: Sorry but there are too many of you 0_0\n[20240102T000236+1100][2407433][pillar_sample_app][DEBUG]: There are 6\n[20240102T000236+1100][2407433][pillar_sample_app][VDEBUG]: Our config is {'too_many_names': 10}\n[20240102T000236+1100][2407433][pillar_sample_app][INFO]: Hello Nick, Fred, James, Alice, Bob, and Malory\n</code></pre> <p>Pillar will also create a basic log file early during the setup process to capture any errors that occur before full logging is available. Let's check it too:</p> <pre><code>% tail /var/tmp/pillar_sample_app.init.log\n&lt;should be empty&gt;\n</code></pre>"},{"location":"quickstart/#detailed-documentation","title":"Detailed Documentation","text":"<p>See Writing Applications.</p>"},{"location":"reference/pillar/","title":"Index","text":""},{"location":"reference/pillar/#pillar","title":"pillar","text":""},{"location":"reference/pillar/application/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> application","text":""},{"location":"reference/pillar/application/#pillar.application","title":"pillar.application","text":""},{"location":"reference/pillar/application/#pillar.application.Application","title":"Application","text":"<pre><code>Application(argv: Optional[List[str]] = None)\n</code></pre> <p>             Bases: <code>LoggingMixin</code></p> <p>Base class for running applications.</p> <p>Child classes should override the <code>self.main</code> method with their application logic.</p> <p>Some attributes should be set on the class while others will be computed and set on the instance. All attributes that are set on the class have default value and are optional. They are tagged as <code>(class)</code> below.</p> <p>Important: the types in the Attributes table below represent the type on the instance, some of these (e.g. <code>name</code>) shadow the ones set on the class (on purpose).</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>(class) name of application - used in logging.</p> <code>application_name</code> <code>str</code> <p>(class) argparse prog name.</p> <code>epilog</code> <code>Optional[str]</code> <p>(class) argparse help text epilog (e.g. copyright info).</p> <code>version</code> <code>Optional[str]</code> <p>(class) version of application - used in argparse help text.</p> <code>logging_manifest</code> <code>LoggingManifest</code> <p>(class) configuration of application's logging.</p> <code>config_args_enabled</code> <code>bool</code> <p>(class) enable collecting config from args.</p> <code>config_required</code> <code>bool</code> <p>(class) providing a config file via args is mandatory.</p> <code>default_config</code> <code>Dict[str, Any]</code> <p>(class) default config of the application</p> <code>config_loader_class</code> <code>Type[ConfigLoader]</code> <p>(class) ConfigLoader to use with the application.</p> <code>logger</code> <code>Logger</code> <p>logger of application</p> <code>log_level</code> <code>int</code> <p>computed logging level</p> <code>args</code> <code>Namespace</code> <p>parsed arguments from argparse</p> <code>config_loader</code> <code>ConfigLoader</code> <p>the ConfigLoader of the application.</p> <code>config</code> <code>Dict[str, Any]</code> <p>the config_loader.config dict.</p> <p>Parameters:</p> Name Type Description Default <code>argv</code> <code>Optional[List[str]]</code> <p>arguments to pass to this application. If <code>None</code> will collect from <code>sys.argv</code> instead.</p> <code>None</code>"},{"location":"reference/pillar/application/#pillar.application.Application.critical","title":"critical","text":"<pre><code>critical(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a CRITICAL message</p> <p>Something is on fire. We somehow caught it but we probably need to exit now. If we keep going more things may catch on fire.</p> <p>In a larger system, someone is probably going to get paged over this. An end user is definitely going to get an error message, probably not even a useful one, just a HTTP 500.</p>"},{"location":"reference/pillar/application/#pillar.application.Application.debug","title":"debug","text":"<pre><code>debug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a DEBUG message</p> <p>Basic debug messages</p>"},{"location":"reference/pillar/application/#pillar.application.Application.error","title":"error","text":"<pre><code>error(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log an ERROR message</p> <p>Something bad has happened but we caught it. We might be able to continue, but other things might start breaking. We can probably still safely exit.</p> <p>In a larger system, this will likely cause a gentle alert to be placed somewhere. An end user might receive a useful error message (like a HTTP 4xx 5xx).</p>"},{"location":"reference/pillar/application/#pillar.application.Application.get_argument_parser","title":"get_argument_parser","text":"<pre><code>get_argument_parser() -&gt; argparse.ArgumentParser\n</code></pre> <p>Get the argument parser for this application.</p> <p>To add your own arguments you should override this method and call <code>super().get_argument_parser()</code>.</p>"},{"location":"reference/pillar/application/#pillar.application.Application.info","title":"info","text":"<pre><code>info(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log an INFO message</p> <p>Print something to the screen/logfile so we know what is happening</p>"},{"location":"reference/pillar/application/#pillar.application.Application.main","title":"main","text":"<pre><code>main() -&gt; Optional[int]\n</code></pre> <p>Main application entrypoint.</p> <p>Child classes MUST implement this method.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>An integer exit code. <code>None</code> will be converted to <code>0</code> during application exit.</p>"},{"location":"reference/pillar/application/#pillar.application.Application.run","title":"run","text":"<pre><code>run(*, prevent_exit: bool = False) -&gt; int\n</code></pre> <p>Run this application until completion.</p> <p>Parameters:</p> Name Type Description Default <code>prevent_exit</code> <code>bool</code> <p>Do not call <code>sys.exit</code> and instead allow the method to return.</p> <code>False</code> <p>Returns:</p> Type Description <code>int</code> <p>the exit_code that would have been passed to <code>sys.exit</code></p>"},{"location":"reference/pillar/application/#pillar.application.Application.setup","title":"setup","text":"<pre><code>setup(*, suppress_warning: bool = False) -&gt; None\n</code></pre> <p>Prepare the application to be run</p> <p>In no particular order, this will:</p> <ul> <li>Setup Logging</li> <li>Parse arguments</li> <li>Load configuration</li> </ul> <p>Once called the following instance attributes will be populated:</p> <ul> <li><code>self.args</code></li> <li><code>self.config</code></li> <li><code>self.config_loader</code></li> <li><code>self.log_level</code></li> </ul> <p>Generally you will not need to call this method as it is called during <code>self.run</code>.</p> <p>This method may only be called once per an instance. If it is called multiple times, subsequent calls will have no effect and a <code>RuntimeWarning</code> will be emited.</p> <p>If this method is overridden in a child class, it should call <code>super().setup()</code> or otherwise set <code>self._setup_called</code> to <code>True</code> to indicate the the application has been correctly setup.</p> <p>Parameters:</p> Name Type Description Default <code>suppress_warning</code> <code>bool</code> <p>Suppress the <code>RuntimeWarning</code> if this method is called multiple times.</p> <code>False</code>"},{"location":"reference/pillar/application/#pillar.application.Application.vdebug","title":"vdebug","text":"<pre><code>vdebug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a Verbose Debug (VDEBUG) message.</p> <p>More than debug, less than everything.</p>"},{"location":"reference/pillar/application/#pillar.application.Application.vvdebug","title":"vvdebug","text":"<pre><code>vvdebug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a Very Verbose Debug (VVDEBUG) message.</p> <p>When you're tired of finding the bug and want to log everything.</p>"},{"location":"reference/pillar/application/#pillar.application.Application.warning","title":"warning","text":"<pre><code>warning(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a WARNING message</p> <p>Something is wrong but we likely can recover or skip it without issue.</p> <p>In a larger system this will likely just go to centralised logging.</p>"},{"location":"reference/pillar/application/#pillar.application.LoggingManifest","title":"LoggingManifest","text":"<p>Simplified configuration of an <code>Application</code>'s logging.</p> Important: <p>Be careful when modifying these options. Errors during logging setup may cause the application to error before any logging is setup causing errors to not be sent to the log files (making debugging much harder). The initial logging will use settings from both the console and file logging settings.</p> <p>Attributes:</p> Name Type Description <code>default_level</code> <code>int</code> <p>Default logging level. Actual log level will be computed from this level and the application's verbosity args.</p> <code>additional_namespaces</code> <code>List[str]</code> <p>Additional namespaces that should be logged.</p> <code>initial_log_location</code> <code>str</code> <p>Directory for storing the initial log</p> <code>initial_log_filename</code> <code>str</code> <p>filename of the initial log. Will be formatted with the application's name.</p> <code>initial_log_level</code> <code>Union[str, int]</code> <p>logging level of initial log.</p> <code>console_stream</code> <code>IO</code> <p>stream to output console logging to</p> <code>console_format</code> <code>str</code> <p>text format for console logging</p> <code>console_format_style</code> <code>str</code> <p>console_format format style</p> <code>console_date_format</code> <code>str</code> <p>console_format date format</p> <code>file_enabled</code> <code>bool</code> <p>enable logging to files.</p> <code>file_default_location</code> <code>str</code> <p>default log file location. Actual location may be changed from the applications log-dir arg.</p> <code>file_filename</code> <code>str</code> <p>filename of log. Will be formatted with the applications name.</p> <code>file_format</code> <code>str</code> <p>text format for file logging</p> <code>file_format_style</code> <code>str</code> <p>file_format format style</p> <code>file_date_format</code> <code>str</code> <p>file_format date format</p> <code>file_max_size</code> <code>int</code> <p>max size of a log file in bytes (see <code>RotatingFileHandler</code>).</p> <code>file_backup_count</code> <code>int</code> <p>number of old log files to keep (see <code>RotatingFileHandler</code>).</p>"},{"location":"reference/pillar/config/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> config","text":""},{"location":"reference/pillar/config/#pillar.config","title":"pillar.config","text":""},{"location":"reference/pillar/config/#pillar.config.ConfigLoader","title":"ConfigLoader","text":"<pre><code>ConfigLoader(\n    default_config: Optional[Dict[str, Any]] = None,\n    default_parsers: Optional[\n        Dict[str, ConfigParser]\n    ] = None,\n)\n</code></pre> <p>             Bases: <code>LoggingMixin</code></p> <p>Load and merge multiple config files from various locations.</p> <p>Attributes:</p> Name Type Description <code>logger</code> <code>Logger</code> <code>merger</code> <code>Merger</code> <p>deepmerge merger</p> <code>parsers</code> <code>Dict[str, ConfigParser]</code> <p>loaded parses</p> <code>config</code> <code>Dict[str, Any]</code> <p>computed config</p> <code>load_stack</code> <code>Dict[str, Dict[str, Any]]</code> <p>loaded files and their respective config before merging. Because dictionaries are ordered this will also be in order of loading. The only only exception is if the same file is loaded multiple times (don't do that).</p> <code>load_errors</code> <code>Dict[str, Dict[str, Any]]</code> <p>errors encountered when loading files. If the same file is loaded multiple times, it will only have the latest error encountered.</p> <p>Parameters:</p> Name Type Description Default <code>default_config</code> <code>Optional[Dict[str, Any]]</code> <p>Set initial <code>self.config</code> to this.</p> <code>None</code> <code>default_parsers</code> <code>Optional[Dict[str, ConfigParser]]</code> <p>Use these parsers instead of the <code>DEFAULT_PARSERS</code>.</p> <code>None</code>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.critical","title":"critical","text":"<pre><code>critical(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a CRITICAL message</p> <p>Something is on fire. We somehow caught it but we probably need to exit now. If we keep going more things may catch on fire.</p> <p>In a larger system, someone is probably going to get paged over this. An end user is definitely going to get an error message, probably not even a useful one, just a HTTP 500.</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.debug","title":"debug","text":"<pre><code>debug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a DEBUG message</p> <p>Basic debug messages</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.error","title":"error","text":"<pre><code>error(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log an ERROR message</p> <p>Something bad has happened but we caught it. We might be able to continue, but other things might start breaking. We can probably still safely exit.</p> <p>In a larger system, this will likely cause a gentle alert to be placed somewhere. An end user might receive a useful error message (like a HTTP 4xx 5xx).</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.info","title":"info","text":"<pre><code>info(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log an INFO message</p> <p>Print something to the screen/logfile so we know what is happening</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.load_config","title":"load_config","text":"<pre><code>load_config(\n    path: Union[str, Path], *, suppress_errors: bool = False\n) -&gt; None\n</code></pre> <p>Load a given config path.</p> <p>The loaded config will be merged into <code>self.config</code>. The actual config loaded will also be stored in <code>self.load_stack[path]</code>. Any errors  during loading will be stored in <code>self.load_errors[path]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>Path to try load from. Can include scheme (e.g. <code>file://config/dev.json</code>)</p> required <code>suppress_errors</code> <code>bool</code> <p>Prevent errors from being thrown while loading the config. This does not affect errors being stored in <code>self.load_errors</code>.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>Unsupported path scheme</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.vdebug","title":"vdebug","text":"<pre><code>vdebug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a Verbose Debug (VDEBUG) message.</p> <p>More than debug, less than everything.</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.vvdebug","title":"vvdebug","text":"<pre><code>vvdebug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a Very Verbose Debug (VVDEBUG) message.</p> <p>When you're tired of finding the bug and want to log everything.</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigLoader.warning","title":"warning","text":"<pre><code>warning(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a WARNING message</p> <p>Something is wrong but we likely can recover or skip it without issue.</p> <p>In a larger system this will likely just go to centralised logging.</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigParser","title":"ConfigParser","text":"<p>Base class for config loaders.</p>"},{"location":"reference/pillar/config/#pillar.config.ConfigParser.parse_content","title":"parse_content","text":"<pre><code>parse_content(content: bytes) -&gt; Any\n</code></pre> <p>Parse content into usable config.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>bytes</code> <p>Raw content to load from</p> required"},{"location":"reference/pillar/config/#pillar.config.JsonParser","title":"JsonParser","text":"<p>             Bases: <code>ConfigParser</code></p> <p>Config parser for JSON</p> <p>If <code>orjson</code> is installed will use that for parsing. It can be installed using <code>pillar[recommended]</code>.</p>"},{"location":"reference/pillar/config/#pillar.config.JsonParser.parse_content","title":"parse_content","text":"<pre><code>parse_content(content: bytes) -&gt; Any\n</code></pre> <p>Parse config into a usable config.</p> <p>See pillar.config.ConfigParser.parse_content.</p>"},{"location":"reference/pillar/config/#pillar.config.YamlParser","title":"YamlParser","text":"<p>             Bases: <code>ConfigParser</code></p> <p>Config parser for YAML</p>"},{"location":"reference/pillar/config/#pillar.config.YamlParser.parse_content","title":"parse_content","text":"<pre><code>parse_content(content: bytes) -&gt; Any\n</code></pre> <p>Parse config into a usable config.</p> <p>See pillar.config.ConfigParser.parse_content.</p>"},{"location":"reference/pillar/dataclass/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dataclass","text":""},{"location":"reference/pillar/dataclass/#pillar.dataclass","title":"pillar.dataclass","text":""},{"location":"reference/pillar/dataclass/#pillar.dataclass.dataclass_slots_kwargs","title":"dataclass_slots_kwargs","text":"<pre><code>dataclass_slots_kwargs() -&gt; Dict[str, Any]\n</code></pre> <p>Generate dataclass slots keyword argument if it is supported by this python version.</p> <p>If it is not supported contains an empty dictionary.</p> <p>To use it unpack it like so <code>@dataclass(**dataclass_slots_kwargs())</code></p>"},{"location":"reference/pillar/exception/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exception","text":""},{"location":"reference/pillar/exception/#pillar.exception","title":"pillar.exception","text":""},{"location":"reference/pillar/exception/#pillar.exception.MissingDependencyError","title":"MissingDependencyError","text":"<pre><code>MissingDependencyError(\n    feature: str,\n    required_package: str,\n    package_name: str,\n    optional_dependency: str,\n)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Exception for when an optional dependency is required but not installed</p> <p>Parameters:</p> Name Type Description Default <code>feature</code> <code>str</code> <p>Name of the feature. This could be a word, phrase, or longer sentence.</p> required <code>required_package</code> <code>str</code> <p>Name of the package we were trying to import. Doesn't need to be the actual import name, could be it's colloquial or PyPI name.</p> required <code>package_name</code> <code>str</code> <p>Name of our package. Used to generate install instructions.</p> required <code>optional_dependency</code> <code>str</code> <p>Name of the optional dependency that should be installed. Used to generate install instructions.</p> required"},{"location":"reference/pillar/exception/#pillar.exception.PillarException","title":"PillarException","text":"<pre><code>PillarException(*args, **kwargs)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Base class for all Pillar specific exceptions</p>"},{"location":"reference/pillar/exception/#pillar.exception.PillarMissingDependencyError","title":"PillarMissingDependencyError","text":"<pre><code>PillarMissingDependencyError(\n    feature: str,\n    required_package: str,\n    optional_dependency: str,\n)\n</code></pre> <p>             Bases: <code>PillarException</code>, <code>MissingDependencyError</code></p> <p>Pillar is missing a required package.</p> <p>As per <code>MissingDependencyError</code> with <code>package_name</code> set to <code>\"pillar\"</code></p>"},{"location":"reference/pillar/logging/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> logging","text":""},{"location":"reference/pillar/logging/#pillar.logging","title":"pillar.logging","text":""},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin","title":"LoggingMixin","text":"<p>             Bases: <code>LoggingMixinBase</code></p> <p>Adds shortcut logging methods to a class</p> <p>Expects that a <code>logging.Logger</code> exists at <code>self.logger</code></p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.critical","title":"critical","text":"<pre><code>critical(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a CRITICAL message</p> <p>Something is on fire. We somehow caught it but we probably need to exit now. If we keep going more things may catch on fire.</p> <p>In a larger system, someone is probably going to get paged over this. An end user is definitely going to get an error message, probably not even a useful one, just a HTTP 500.</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.debug","title":"debug","text":"<pre><code>debug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a DEBUG message</p> <p>Basic debug messages</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.error","title":"error","text":"<pre><code>error(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log an ERROR message</p> <p>Something bad has happened but we caught it. We might be able to continue, but other things might start breaking. We can probably still safely exit.</p> <p>In a larger system, this will likely cause a gentle alert to be placed somewhere. An end user might receive a useful error message (like a HTTP 4xx 5xx).</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.info","title":"info","text":"<pre><code>info(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log an INFO message</p> <p>Print something to the screen/logfile so we know what is happening</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.vdebug","title":"vdebug","text":"<pre><code>vdebug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a Verbose Debug (VDEBUG) message.</p> <p>More than debug, less than everything.</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.vvdebug","title":"vvdebug","text":"<pre><code>vvdebug(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a Very Verbose Debug (VVDEBUG) message.</p> <p>When you're tired of finding the bug and want to log everything.</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixin.warning","title":"warning","text":"<pre><code>warning(msg: str, *args, **kwargs) -&gt; None\n</code></pre> <p>Log a WARNING message</p> <p>Something is wrong but we likely can recover or skip it without issue.</p> <p>In a larger system this will likely just go to centralised logging.</p>"},{"location":"reference/pillar/logging/#pillar.logging.LoggingMixinBase","title":"LoggingMixinBase","text":"<p>Base class for logging mixins</p>"},{"location":"reference/pillar/logging/#pillar.logging.NotFilter","title":"NotFilter","text":"<pre><code>NotFilter(name: str)\n</code></pre> <p>             Bases: <code>Filter</code></p> <p>Ignore the given logger (and all subloggers).</p> <p>Is the opposite of <code>logging.Filter</code>.</p> References <ul> <li>https://docs.python.org/3/library/logging.html#filter-objects</li> </ul>"},{"location":"reference/pillar/logging/#pillar.logging.NotFilter.filter","title":"filter","text":"<pre><code>filter(record) -&gt; bool\n</code></pre> <p>As per <code>logging.Filter.filter</code></p>"},{"location":"reference/pillar/logging/#pillar.logging.UnderscoreLoggingMixin","title":"UnderscoreLoggingMixin","text":"<p>             Bases: <code>LoggingMixinBase</code></p> <p>Add shortcut logging methods to a class with underscore (<code>_</code>) prefix</p> <p>Expects that a <code>logging.Logger</code> exists at <code>self._logger</code>.</p>"},{"location":"reference/pillar/logging/#pillar.logging.get_log_level","title":"get_log_level","text":"<pre><code>get_log_level(verbosity: int, default_level: int) -&gt; int\n</code></pre> <p>Get the log level based on the default log level.</p> <p>This function essentially adds a \"verbosity level\" per \"major log level\" lower than the default.</p> <p>For example, if <code>default_level == DEBUG</code>, then <code>verbosity == 1</code> will return <code>VDEBUG</code> and <code>verbosity &gt;= 2</code> will return <code>VVDBEUG</code>. For any <code>defaul_level &gt; INFO</code> will always use 4 levels of verbosity (<code>INFO</code>, <code>DEBUG</code>, <code>VDEBUG</code>, <code>VVDEBUG</code>).</p>"},{"location":"reference/pillar/logging/#pillar.logging.logging_file_handler_errors_kwargs","title":"logging_file_handler_errors_kwargs","text":"<pre><code>logging_file_handler_errors_kwargs(\n    errors: str,\n) -&gt; Dict[str, str]\n</code></pre> <p>Generate FileHandler keyword argument if it is supported by this python version.</p> <p>If it is not supported contains an empty dictionary.</p> <p>To use it unpack it like so <code>FileHandler(**logging_file_handler_errors_kwargs())</code></p>"},{"location":"reference/pillar/util/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> util","text":""},{"location":"reference/pillar/util/#pillar.util","title":"pillar.util","text":""}]}